const fs = require('fs-extended'),
  nodePath = require('path'),
  last = require('lodash.last'),
  assert = require('assert'),
  isString = require('lodash.isstring'),
  isFileExist = require('./isFileExist'),
  forEach = require('lodash.foreach');

/**
 * object 내용을 문자열화 한다.
 *
 * @param {*} offset
 * @param {*} files
 */
function es5Print(offset, path, files, content) {
  var lastItem = last(Object.keys(files)); // last item of files

  forEach(files, function (file, key) {
    var name, str;
    name = nodePath.basename(key, '.js');

    if (!isString(file)) {
      content.push(Array(offset).join(' ') + name + ' : {');
      es5Print(offset + 2, path, file, content);
      str = Array(offset).join(' ') + '}';
    } else {
      file = file.replace(new RegExp(path), '');
      str = Array(offset).join(' ') + name + ' : require(\'.' + file + '\')'

    }
    str = (lastItem !== key) ? str + ', ' : str;
    content.push(str);
  });
}

/**
 * index.js 파일로 출력한다.
 *
 * @param {*} content
 */
function es5WriteIndexJs(path, files) {
  const dest = nodePath.resolve(path, 'index.js');

  // last = last( keys(files) );
  let content = ['// This file was generated automatically.', '// Do not edit!!'];
  content.push('module.exports = {');
  es5Print(3, path, files, content);
  content.push('};')
  content = content.join('\n');

  // console.log('content', content)
  let origin = '';
  if (isFileExist(dest)) {
    origin = fs.readFileSync(dest, 'utf8');
  }

  isEdited(origin, content) && fs.writeFileSync(dest, content);
}

function isEdited(origin, content) {
  // console.log('origin');
  // console.log(origin)

  // console.log('\n')
  // console.log('content')
  // console.log(content);

  // console.log('\n')
  // console.log(origin === content)

  return origin !== content || !origin;
}

function isAutoGeneratedFile(origin) {
  return /\/\/ This file was generated automatically/gm.test(origin) || !origin;
}

/**
 * index.js 파일로 출력한다.
 *
 * @param {*} path
 * @param {*} file
 * @param {*} sub  // .generateIndex가 있는 하위 폴더 인가?
 */
function es6WriteIndexJs(path, files, sub) {
  const dest = nodePath.resolve(path, 'index.js');
  let content = ['// This file was generated automatically.', '// Do not edit!!'];
  let libs = [];

  forEach(files, (file, key) => {
    if (!isString(file)) {
      es6WriteIndexJs(nodePath.join(path, key), file, true);
      // console.log(nodePath.join(path, key), file)
      file = `/${key}`;
    } else {
      file = file.replace(new RegExp(path), '').replace(/\.js/, '');
    }
    libs.push(key);
    content.push(`import ${key} from '.${file}';`);
    // content.push(`export { default as ${key} } from '.${file}';`);
  })
  content.push('');
  content.push(`export default { ${libs.join(', ')} };`);
  content.push('\n');
  content = content.join('\n');

  let origin;
  if (isFileExist(dest)) {
    origin = fs.readFileSync(dest, 'utf8');
  }

  // console.log('origin', origin);
  // console.log('path', path)
  // console.log('isAutoGeneratedFile', isAutoGeneratedFile(origin))
  // console.log('isEdited', isEdited(origin, content))
  // console.log('\n')

  isAutoGeneratedFile(origin) && isEdited(origin, content) && fs.writeFileSync(dest, content);
}

module.exports = function (root, path, files, options) {
  // console.log('path', path);
  // console.log('files', files);
  // console.log('options', options);
  assert.ok(/es5|es6/.test(options.type), 'Only es5 or es6 is available for type.');

  if (options.type === 'es5') {
    es5WriteIndexJs(path, files);
  } else {
    es6WriteIndexJs(path, files);
  }
};